import { Selector } from './driver';
import { MatchLevel, Region, OffsetRect, AccessibilityRegionType, AccessibilityGuidelinesVersion, AccessibilityLevel, Proxy, LazyLoadOptions } from './data';
declare type RegionReference<TElement, TSelector> = Region | ElementReference<TElement, TSelector>;
declare type ElementReference<TElement, TSelector> = TElement | Selector<TSelector>;
declare type FrameReference<TElement, TSelector> = ElementReference<TElement, TSelector> | string | number;
declare type ContextReference<TElement, TSelector> = {
    frame: FrameReference<TElement, TSelector>;
    scrollRootElement?: ElementReference<TElement, TSelector>;
};
declare type FloatingRegion<TRegion> = {
    region: TRegion;
    maxUpOffset?: number;
    maxDownOffset?: number;
    maxLeftOffset?: number;
    maxRightOffset?: number;
};
declare type AccessibilityRegion<TRegion> = {
    region: TRegion;
    type?: AccessibilityRegionType;
};
declare type PaddedRegion<TRegion> = {
    region: TRegion;
    padding?: number | OffsetRect;
};
export declare type MatchSettings<TRegion> = {
    exact?: {
        minDiffIntensity: number;
        minDiffWidth: number;
        minDiffHeight: number;
        matchThreshold: number;
    };
    matchLevel?: MatchLevel;
    sendDom?: boolean;
    useDom?: boolean;
    enablePatterns?: boolean;
    ignoreCaret?: boolean;
    ignoreDisplacements?: boolean;
    accessibilitySettings?: {
        level?: AccessibilityLevel;
        guidelinesVersion?: AccessibilityGuidelinesVersion;
    };
    ignoreRegions?: (TRegion | PaddedRegion<TRegion>)[];
    layoutRegions?: (TRegion | PaddedRegion<TRegion>)[];
    strictRegions?: (TRegion | PaddedRegion<TRegion>)[];
    contentRegions?: (TRegion | PaddedRegion<TRegion>)[];
    floatingRegions?: (TRegion | FloatingRegion<TRegion>)[];
    accessibilityRegions?: (TRegion | AccessibilityRegion<TRegion>)[];
    pageId?: string;
};
export declare type ScreenshotSettings<TElement, TSelector> = {
    region?: RegionReference<TElement, TSelector>;
    frames?: (ContextReference<TElement, TSelector> | FrameReference<TElement, TSelector>)[];
    scrollRootElement?: ElementReference<TElement, TSelector>;
    fully?: boolean;
};
export declare type CheckSettings<TElement, TSelector> = MatchSettings<RegionReference<TElement, TSelector>> & ScreenshotSettings<TElement, TSelector> & {
    name?: string;
    disableBrowserFetching?: boolean;
    layoutBreakpoints?: boolean | number[];
    visualGridOptions?: {
        [key: string]: any;
    };
    hooks?: {
        beforeCaptureScreenshot: string;
    };
    renderId?: string;
    variationGroupId?: string;
    waitBeforeCapture?: number;
    timeout?: number;
    lazyLoad?: boolean | LazyLoadOptions;
};
export declare type OCRExtractSettings<TElement, TSelector> = {
    target: RegionReference<TElement, TSelector>;
    hint?: string;
    minMatch?: number;
    language?: string;
};
export declare type OCRSearchSettings<TPattern extends string> = {
    patterns: TPattern[];
    ignoreCase?: boolean;
    firstOnly?: boolean;
    language?: string;
};
export declare type LocateSettings<TLocator extends string> = {
    locatorNames: TLocator[];
    firstOnly?: boolean;
};
export declare type CloseBatchesSettings = {
    batchIds: string[];
    serverUrl?: string;
    apiKey?: string;
    proxy?: Proxy;
};
export declare type DeleteTestSettings = {
    testId: string;
    batchId: string;
    secretToken: string;
    serverUrl?: string;
    apiKey?: string;
    proxy?: Proxy;
};
export {};
